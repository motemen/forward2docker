#!/bin/sh

# % ./forward2docker <path to Dockerfile>

die() {
    echo "$@" >&2
    exit 1
}

log() {
    echo "[forward2docker] $@" >&2
}

set -e

if [ $# -eq 0 ]; then
    die "usage: $0 <DOCKERFILE> ..."
fi

test -f "$HOME/.forward2docker/profile" && . "$HOME/.forward2docker/profile"

BOOT2DOCKER=${BOOT2DOCKER-$(dirname $0)/boot2docker}
PORT_OFFSET=${PORT_OFFSET-10000}

__ssh() {
  ssh_args=$@

  expect -c "
spawn -noecho $BOOT2DOCKER ssh $ssh_args
expect password:
send \"tcuser\\r\"
interact
"
}

### Initialize boot2docker

if [ ! -x $BOOT2DOCKER ]; then
    curl -# https://raw.github.com/steeve/boot2docker/master/boot2docker > boot2docker
    chmod +x boot2docker
fi

if ! $BOOT2DOCKER status; then
    $BOOT2DOCKER init || true
    $BOOT2DOCKER up   || true
    $BOOT2DOCKER status
fi

export DOCKER_HOST=localhost

log 'boot2docker initialized.'

### Set up image/container

containers=

__counter=0

while [ $# -gt 0 ]; do
    dockerfile=$1
    shift

    if [ ! -f "$dockerfile" ]; then
        log "[error] not a file: $dockerfile"
        continue
    fi

    log 'Building image...'

    dockerfile_dir=${TMPDIR-/tmp}/forward2docker.$$.$((__counter=__counter+1))
    mkdir -p "$dockerfile_dir"
    cp "$dockerfile" "$dockerfile_dir/Dockerfile"
    docker build "$dockerfile_dir"

    image=$(docker images -q | head -1)

    log 'Starting container...'

    container=$(
        docker run -d "$image"
    )
    containers="$containers $container"
done

if [ -z "$containers" ]; then
    die 'Could not start any containers. abort.'
fi

port_forwards=$(
    docker inspect -format='{{with $root:=.}}{{with $n:=.NetworkSettings}}{{range $port,$:=$n.Ports}}{{$root.ID}} {{$n.IPAddress}} {{$port}}{{"\n"}}{{end}}{{end}}{{end}}' $containers | while read id addr port; do
        if [ -n "$port" ]; then
            port=${port%/tcp}
            local_port=$(($port + $PORT_OFFSET))
            echo "-L$local_port:$addr:$port"
            log "$id: listen on port $local_port"
        fi
    done
)

log 'Starting port forwarding...'

__ssh $port_forwards -- "echo Success! \\; for container in $containers \\; do docker logs -f \\\$container & done \\; wait" || true

log 'Cleaning up container...'

docker stop $containers > /dev/null || true
docker kill $containers > /dev/null || true
docker rm   $containers > /dev/null || true
